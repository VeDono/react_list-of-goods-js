{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_BY_ALPHABET","SORT_BY_LENGTH","App","useState","sortedBy","setSortedBy","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","map","good","id","crypto","randomUUID","name","length","sort","goodFirst","goodSecond","localeCompare","reverse","getPreparedGoods","className","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"4OAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAIIC,EAAmB,OACnBC,EAAiB,SAiChB,IAAMC,EAAM,WACjB,MAAgCC,mBApCV,IAoCtB,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAlCR,SAA0BC,EAAOL,EAAUE,GACzC,IAAMI,EAAgBD,EAAME,KAAI,SAAAC,GAAI,MAClC,CACEC,GAAIC,OAAOC,aACXC,KAAMJ,EACNK,OAAQL,EAAKK,WAuBjB,OAnBIb,GACFM,EAAcQ,MAAK,SAACC,EAAWC,GAC7B,OAAQhB,GACN,KAAKJ,EACH,OAAOmB,EAAUf,GAAUiB,cAAcD,EAAWhB,IAEtD,KAAKH,EACH,OAAOkB,EAAUf,GAAYgB,EAAWhB,GAE1C,QACE,OAAO,MAKXE,GACFI,EAAcY,UAGTZ,EAMca,CAAiBxB,EAAiBK,EAAUE,GAOjE,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYtB,IAAaJ,IAE7B2B,QAAS,kBAAMtB,EAAYL,IAN7B,iCAWA,wBACEyB,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYtB,IAAaH,IAE7B0B,QAAS,kBAAMtB,EAAYJ,IAN7B,4BAWA,wBACEwB,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAapB,IAEjBqB,QAAS,kBAAMpB,GAAeD,IANhC,sBAWEF,GAAYE,IACZ,wBACEmB,KAAK,SACLD,UAAU,4BACVG,QA7CI,WACZtB,EAzCoB,IA0CpBE,GAAc,IAwCR,sBAUJ,6BACGC,EAAaG,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAAkCA,EAAKI,MAAfJ,EAAKC,aC9GvCe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.745e5406.chunk.js","sourcesContent":["import cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport { useState } from 'react';\n\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_BY_INITIAL = '';\nconst SORT_BY_ALPHABET = 'name';\nconst SORT_BY_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, sortedBy, isReversed) {\n  const preparedGoods = goods.map(good => (\n    {\n      id: crypto.randomUUID(),\n      name: good,\n      length: good.length,\n    }\n  ));\n\n  if (sortedBy) {\n    preparedGoods.sort((goodFirst, goodSecond) => {\n      switch (sortedBy) {\n        case SORT_BY_ALPHABET:\n          return goodFirst[sortedBy].localeCompare(goodSecond[sortedBy]);\n\n        case SORT_BY_LENGTH:\n          return goodFirst[sortedBy] - goodSecond[sortedBy];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortedBy, setSortedBy] = useState(SORT_BY_INITIAL);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortedBy, isReversed);\n\n  const reset = () => {\n    setSortedBy(SORT_BY_INITIAL);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortedBy !== SORT_BY_ALPHABET },\n          )}\n          onClick={() => setSortedBy(SORT_BY_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortedBy !== SORT_BY_LENGTH },\n          )}\n          onClick={() => setSortedBy(SORT_BY_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortedBy || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good.id}>{good.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}